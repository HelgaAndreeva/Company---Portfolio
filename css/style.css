html {
  box-sizing: border-box;
}

/* Указываем box sizing */
*,
*::before,
*::after {
  box-sizing: inherit;
}

/* Убираем внутренние отступы */
ul[class],
ol[class] {
  padding: 0;
}

/* Убираем внешние отступы */
body,
h1,
h2,
h3,
h4,
p,
ul[class],
ol[class],
li,
figure,
figcaption,
blockquote,
dl,
dd {
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

/* Упрощаем работу с изображениями */
img {
  max-width: 100%;
  display: block;
}

@font-face {
  font-family: "Inter";
  src: url(../fonts/InterLight.woff2) format("woff2");
  font-display: swap;
  font-weight: 300;
  font-style: normal;
}

@font-face {
  font-family: "Inter";
  src: url(../fonts/InterRegular.woff2) format("woff2");
  font-display: swap;
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: "Inter";
  src: url(../fonts/InterMedium.woff2) format("woff2");
  font-display: swap;
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: "Inter";
  src: url(../fonts/InterSemiBold.woff2) format("woff2");
  font-display: swap;
  font-weight: 600;
  font-style: normal;
}

@font-face {
  font-family: "Inter";
  src: url(../fonts/InterBold.woff2) format("woff2");
  font-display: swap;
  font-weight: 700;
  font-style: normal;
}

/* Выставляем основные настройки по-умолчанию для body */
body {
  font-family: "Inter", sans-serif;
}

/* переменные для цвета, будет писать название переменной, например white, вместе #fff каждый раз, это удобнее */
/* упрощаем верстку, отступ в 190px в services, на мобильных устройствах будет на пол экрана, мы будет сокращать (условно до 40px) их при адаптивной верстке. Чтобы не делать это для каждого элемента в отдельности, мы сделаем это в переменную --offset 190px. и при адаптиве, мы скажем в медиа запросе, что offset190px, будет не 190, а условно 50px. Ищет через поиск везде, где есть 190px и меняем их на переменную --offset. Получается, что везде есть нужным нам отступ, но при адаптиве мы сможем его везде легко поменять*/
/* Делаем адаптив: сжимаем до 1000px - все нормально, следующее значение 768 (планшетное разрешение), следующее значение 576 начинает все заезжать друг на друга. Первое: разбираемся с меню (либо бургер, либо расположить его внизу, и что не поместится сделать горизонтальным скроллом). Создаем файл media.css, подключаем его к html после стандартного файла css.т.к медиа запросы должны стоять ниже основных стилей */
:root {
  --color-light: #fff;
  --color-grey: #838383;
  --color-dark: #1d1d1f;

  --offset: 190px;
}

/* visually-hidden - это класс,который позволяет скрывать заголовки от обычных пользователей, но читаемых для экранных дикторов (люди с ограниченными возможностями) */
.visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
  border: 0;
  clip: rect(0 0 0 0);
}

/* у button есть по умолчанию padding, который может влиять на контент этих кнопочек в браузере  safari, border, background-color: transparent  - сделает его прозрачным и чтобы при наведении курсор был "лапкой-пальчиком" - cursor: pointer*/
.btn-reset {
  padding: 0;
  border: none;
  background-color: transparent;
  cursor: pointer;
}

.list-reset {
  padding: 0;
  margin: 0;
  list-style: none;
}

/* чтобы контейнер работал правильно при сжатии сайта (адаптив), надо использовать не просто максимальную ширину, но и добавлять паддинги, чтобы контект не прилипал к стенкам, максимальная ширина данного проекта 1200px, чтобы контент не прилипал используются по бокам паддинги по 15px, значит нам надо увеличить max-width на 30px (15+15) */
.container {
  max-width: 1230px;
  padding: 0 15px;
  margin: 0 auto;
}

/* выносим класс btn навверх, т.к. он считается общим для кнопок в данном макете, отличаются только цвета на черный и белый. Напишем общием стили. Зададим общий бэкграунд лайт (белый фон), а color темный (черные буквы) */
/* размер кнопки 180 на 60, делаем: паддинги на глаз 20px 20px и подгоняем в консоли и получаем паддинг 20px 63px,  либо делаем так, оставляем по 20px и добавляем min-width 180px и получаем тоже самое, и в этом случае ничего не будет прилипать и смешаться  */
.btn {
  padding: 20px;
  min-width: 180px;
  color: var(--color-dark);
  background-color: var(--color-light);
  font-weight: 600;
  font-size: 17px;
  line-height: 21px;
  text-align: center;
  padding: 20px;
  min-width: 180px;
  transition: color 0.3s  ease-in-out, background-color 0.3s ease-in-out;
}
/*   transition: color 0.3s  ease-in-out, background-color 0.3s ease-in-out; - плавная анимация */


/* тоже самое пропишем для модификатора btn--light, т.к. основная кнопка btn может измениться, если проетк будет разрастаться, а лайт останется лайтом. */
.btn--light {
  color: var(--color-dark);
  background-color: var(--color-light);
}

/* hover при наведении может сделать реверсное состояние, т.е. кнопка была белая, при наведении становится черной и наоборот */
.btn--light:hover {
  color: var(--color-light);
  background-color: var(--color-dark);
}

.btn--dark {
  color: var(--color-light);
  background-color: var(--color-dark);
}

.btn--dark:hover {
  color: var(--color-dark);
  background-color: var(--color-light);
}

/* т.к. данный проект содержит несколько секций, похожих по структуре, а именно колонки, которые будут реализованны с помощью grid, сделаем хак для упрощения работы, добавим дополнительный класс grid, где пропишем основные свойства */
.grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  column-gap: 60px;
}

/* Высота нашей шапки по макету 119px, подгонять ее будем paddingом. Фиксированная высота плоха для перенаполнения, если ее перенаполнить, то она сломается. 39px подгоняли в консоли, чтобы получилось примерно 119px шапка. Наводим на блок header, и увеличиваем в консоли паддинг, пока не получится примерно нужная высота всей шапки.  */
/* чтобы бэкграунд имейдж растянулось на шапку, используем position: absolute, который выдернет шапку из потока width расстянет шапку на 100% ширины */
.header {
  position: absolute;
  left: 0;
  top: 0;
  padding: 39px 0;
  width: 100%;
}

/* т.к container задает только размер шапки и отступы, создаем дополнительный класс header__container, где указывает display:flex чтобы элементы выстроились в строчку, justify-content: space-between - раскидает две части шапки по разным сторонам: лого и навигацию. Тоже самое прописываем nav__list, чтобы они встали в одну строку, а не столбиком и для header__right */
.header__container {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

/* justify-content: space-between; - не будет, т.к они уже раскиданы по сторонам в header__container */
.header__right {
  display: flex;
  align-items: center;
}

.nav__list {
  display: flex;
  align-items: center;
}

/* делаем отступы для элементов навигации, по макету они 35px. Суть not(:last-child) в том, что марджин райт задается всем эл-там, кроме последнего. А для отступа с лупой пропишем марджин райт в хедер бтн*/
.nav__item:not(:last-child) {
  margin-right: 35px;
}

.nav__link {
  font-weight: 400;
  font-size: 16px;
  line-height: 19px;
  color: var(--color-light);
  transition: color 0.3s ease-in-out;
}

.nav__link:hover {
  color: var(--color-grey);
}
/* Делаем ховер анимацию при наведении на навигацию: добавляем в нав линк транзишн, и пишем ниже нав__линк:ховер */


.logo {
  font-weight: 500;
  font-size: 32px;
  line-height: 130%;
  color: var(--color-light);
}

/* таким образом установили точный размер иконки у этой кнопки поиска */
.header__search {
  margin-right: 35px;
  width: 24px;
  height: 24px;
  color: var(--color-light);
  transition: color 0.3s ease-in-out;
}

/* сделаем ховер на свг иконке поиска: идем в html и находим эту свг в коде, внутри кода свг будет атрибут stroke=white - удалить, бывает еще атрибут fill (feel как-то так ). когда мы ее удаляем, мы не видим свг, т.к. удалили ее обводку. Идем в хедер серч, и задаем цвет белый. А в header__search svg добавляем stroke: currentColor; (currentColor - текущий цвет), т.е мы берем цвет элемента из хедер серч, и он подставляется в хедер серч свг. Теперь добавляем транзишн в хедер серч  и пишем после хедер серч свг = хедер серч ховер*/

/* и для самой svg - какую бы иконку сюда не запихнули, она подстроится под размер 24на24, как написано выше */
.header__search svg {
  display: block;
  width: 100%;
  height: 100%;
  stroke: currentColor;
  object-fit: cover;
}

.header__search:hover {
  color: var(--color-grey);
}

/* background-position: center чтобы изображение было по центру, background-size: cover - чтобы всегда растягивалось на родителе */
/* padding top 400px - предварительно/временно сделали отступ, чтобы было удобнее работать с шапкой*/
/* Эта секция высотой 900px, чтобы не делать ее фиксированной, делаем ее высотой во весь экран с помощью height: 100vh; (vh - это ед. измерения по размеру экрана), она будет подстраиваться под то, как ведет себя браузер и зададим мин. высооту 700px, чтобы выше этого значения секция не поднималась */
/* отступ от шапки до заголовка 150px по макету, делаем отступ с помощью calc 120px (119px по макету высота шапки) + 150px (от шапки до заголовка) */
.hero {
  padding-top: calc(120px + 150px);
  height: 100vh;
  min-height: 900px;
  background-image: url(../img/hero-cover.jpg);
  background-position: center;
  background-size: cover;
  background-repeat: no-repeat;
}

/* чтобы текст переносился как в макете, задаем max-width 936px, но это не помогло в данной ситуации, поэтому мы добавим неразрывный пробел, как это делает типограф и между словами the best добавим &nbsp; в этом случае the привязано к слову best */
.hero__title {
  margin: 0;
  margin-bottom: 30px;
  max-width: 936px;
  font-style: normal;
  font-weight: 600;
  font-size: 96px;
  line-height: 116px;
  color: var(--color-light);
}

/* похожая ситуация с переносом текста, добавляет max-width по макету  468px, в этот раз этого достаточно и все получилось перенести, как надо. Margin 0 сбрасывает все отступы по умолчанию, чтобы отступы были только вниз, какие мы задали*/
.hero__descr {
  margin: 0;
  margin-bottom: 50px;
  max-width: 468px;
  font-style: normal;
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-light);
  margin-bottom: 50px;
}

/* grid по умолчанию ничего не изменять внешне, но если указать кол-во колонок grid-template-columns: repeat(2, 1fr); - то получим как в макете. 2 - 2 колонки, 1fr(часть) - грубо говоря по 50% каждая, по макету ширина 1200px, значит 1 часть будет 600px. Между колонками по макету есть отступ, за это свойство отвечает gap. Отступ сверху для этих колонок одинаковый(что у первой колонки, что у второй) 190px - padding-top 190px*/
.about__top {
  padding-top: var(--offset);
  margin-bottom: var(--offset);
}

/* чтобы не прописывать в completed__dscr отступ 60px, и чтобы не было у последнего элемента отступа 60px - делаем через ласт чайлд */
.about__item:not(:last-child) {
  margin-bottom: 60px;
}

.completed__value {
  font-weight: 300;
  font-size: 64px;
  line-height: 140%;
  color: var(--color-dark);
}

.completed__descr {
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-grey);
}

.about__title {
  margin: 0;
  margin-bottom: 60px;
  font-weight: 700;
  font-size: 44px;
  line-height: 140%;
  color: var(--color-dark);
}

.about__descr {
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-dark);
}

/* т.к. в макете невозможно определить отступ вниз, делаем "на глаз" 30px, и делаем через ласт чайлд, чтобы у последнего элемента не было отступа в 30px */
.about__descr:not(:last-child) {
  margin-bottom: 30px;
}

/*   overflow: hidden; - все, что выходит за пределы - обрезалось. position: relative - кнопка плей будет по центру видео, и мы ее будем распологать абсолютом, и чтобы относительно этого видео это сделать, мы ее будет распологать абсолютом*/
.about__video {
  position: relative;
  width: 100%;
  height: 630px;
  overflow: hidden;
}

/* растягиваем все видео на весь блок */
.about__video video {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

/* чтобы видео запускалось - надо написать js код */
/* чтобы кнопку плей было видно - позишн абсолют, а чтобы был по центру  левт50%, top50% и трансформ транслейт -50%, -50% */
.about__play {
  position: absolute;
  left: 50%;
  top: 50%;
  width: 100px;
  height: 100px;
  transform: translate(-50%, -50%);
  color: var(--color-light);
  transition: color 0.3s ease-in-out;
}
/* // первое - это подключаем js в html
// чтобы кнопка работала, нам нужно ее найти:
// запись querySelector позволяет найти определенный селектор, находим какой-то элемент, в данном случае кнопку "play". После этого нашли и само видео.
// записью addEventListener навесили обработчик, (добавить обработчик событий) событие - клик мышкой, сделали обработчик событиями кликом на кнопку плей, и внутри сделали функцию : добавляли какое-то действие - мы говорим, что мы хотим запустить видео с помощью метода "play" , далее с помощью записи сетАтрибьют (установи атрибут) - установили атрибут контролс и добавляем класс с помощью классЛИст, адд (добавить) - добавили класс about__play--hidden и добавили его в css , прописав ему стили */
.about__play--hidden {
  display: none;
}

.about__play svg {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.about__play circle {
  fill: currentColor;
}
/* Делаем ховер анимацию при наведении на кнопку плей. Удаляем в html svg теге атрибут fill, затем добавляем  в about__play color белый, затем обращаемся к about__play circle (в html коде внутри свг есть circle) и пропишем, что fill currentColor. Пишем транзинш в эбаут плей и после эбаут__плей серкл пишем эбаут__плей ховер */

.about__play:hover {
  color: var(--color-grey);
}


.portfolio {
  padding-top: var(--offset);
  padding-bottom: var(--offset);
}

.portfolio-item:not(:last-child) {
  margin-bottom: 120px;
}

/* мы разместили элементы в колонку, и разместили по центру относительно картинки  */
.portfolio-item__col {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
}

/* по макету второй блок справа надо развернуть, поэтому делаем: обратимся к портфолио-айтем-кол, к первому first child и скажем, что у негго будет ордер 2 (второе положение), а у последнего ласт чаилда будет ордер 1(первое положение) */
/* есть класс reverse, мы обращаемся к айтем-кол и говорим, что ты будешь вторая среди них, а дркгой колонке говорим, что ты будешь первая */

.portfolio-item--reverse .portfolio-item__col:first-child {
  order: 2;
}

.portfolio-item--reverse .portfolio-item__col:last-child {
  order: 1;
}

.portfolio-item__title {
  margin: 0;
  margin-bottom: 20px;
  font-weight: 400;
  font-size: 24px;
  line-height: 140%;
  color: var(--color-grey);
}

.portfolio-item__descr {
  margin: 0;
  margin-bottom: 60px;
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-dark);
}

.quoute {
  padding-bottom: var(--offset);
}

.quoute__title {
  margin: 0;
  margin-bottom: 50px;
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-grey);
}

.quoute__content {
  margin: 0;
  max-width: 820px;
}

.quoute__text {
  margin: 0;
  margin-bottom: 30px;
  font-weight: 500;
  font-size: 36px;
  line-height: 150%;
  color: var(--color-dark);
}

/* у тега cite курсивный шрифт, сбрасываем его фонт-стайл нормал */
.quoute__author {
  font-style: normal;
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-dark);
}

.quoute__author span {
  color: var(--color-grey);
}

.services {
  padding-bottom: var(--offset);
}

.services__image {
  width: 100%;
  height: 900px;
  margin-bottom: var(--offset);
  object-fit: cover;
}

/* по макету есть горизонтальные линии, делаем их через бордер топ (чтобы полосы были только сверху), берем по макету колор, вставляем в гугл и находим rgb цвет, добавляем rgba, и добавляем опасити 0.4, как в макете. По макету паддинги сверху от линии до текса 40px и снизу от текста до линии 40px, делаем запись padding 40 0 (40 сверху и снизу, по бокам 0) */
.services-item {
  padding: 40px 0;
  border-top: 1px solid rgba(29, 29, 31, 0.4);
}

.services-item__title {
  margin: 0;
  font-weight: 500;
  font-size: 32px;
  line-height: 130%;
  color: var(--color-dark);
}

.services-item__descr {
  margin: 0;
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-grey);
}

/* padding-top 90px от компани до секции services , padding-bottom 152px от линии после e-mail до края */
.footer {
  padding-top: 90px;
  padding-bottom: 152px;
  background-color: var(--color-dark);
}

/* делаем инлайн-блок, т.к. строчные элементы (лого это тег а = строчный элемент) не знают, что такое марджин и паддинг*/
.footer__logo {
  display: inline-block;
  margin-bottom: 48px;
}

.footer__address {
  margin-bottom: 30px;
  font-weight: 400;
  font-size: 16px;
  line-height: 150%;
  color: var(--color-grey);
}

.social {
  display: flex;
  align-items: center;
}

.social-item:not(:last-child) {
  margin-right: 20px;
}

/* задаем размеры на всякий случай иконкам соцсетей */
.social__link {
  display: block;
  width: 40px;
  height: 40px;
  color: var(--color-light);
  transition: color 0.3s ease-in-out;
}

/* и для самих иконок svg */
.social__link svg {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
  fill: currentColor;
}

.social__link:hover {
  color: var(--color-grey);
}
/* как это сделать было описано выше в навигации, кнопках, иконке поиска (лупа) */


/* как определить какой отступ будет вниз: от текста до e-mail 34px, а от e-mail до линии 24px, значит чтобы и сверху и снизу было по 24px , делаем отступ 10px: 34-24px */
.footer__title {
  margin: 0;
  margin-bottom: 10px;
  font-weight: 500;
  font-size: 32px;
  line-height: 130%;
  color: var(--color-light);
}

/* cтилизуем инпут, сначала обращаемся к footer__form, и растягиваем его на 100%, затем обращаемся к footer__input и тоже растягиваем его на 100%, и для footer__btn пока делаем display:none. В footer__input бэграунд прозначный transparent и делаем паддинги по 24px сверху и снизу, и 0 по бокам. бордер который есть нас не устраивает, поэтому сначала убираем его, а затем делам внизу, как было в секции выше. Затем стилизуем текст внутри инпута, серый цвет по макету - это цвет для подсказки ввода, а сам вводимый текст сделаем белым: обращаемся к футер__инпут к псевдоэлементу плейсхолдер и ему задаем серый цвет, а в футер__инпут ставим белый*/
.footer__form {
  position: relative;
  width: 100%;
}

/* есть нюанс, если вводим какой-то большой e-mail, то вводимые данные заходят на кнопку, поэтому сделаем справа отступ в 30px, чтобы текст не доходил до стрелочки-кнопочки */
.footer__input {
  border: none;
  border-bottom: 1px solid var(--color-grey);
  width: 100%;
  padding: 24px 0;
  padding-right: 30px;
  background-color: transparent;
  font-style: normal;
  font-weight: 700;
  font-size: 13px;
  line-height: 16px;
  letter-spacing: 0.08em;
  text-transform: uppercase;
  color: var(--color-light);
}

/* серый цвет для подсказки ввода, а белый вводимый текст выше указываем */
.footer__input::placeholder {
  color: var(--color-grey);
}


/* делаем кнопку-стрелочку: забираем из макета саму стрелочку svg, убираем предварительный display: none; , добавляем в footer__form position:relative, т.к. относительно нее будет распологать абсолютом элемент footer__btn, делаем размер стрелки 24px на 24px,   right: 0; top: 0; затем для footer__btn svg делаем display: block;width: 100%;height: 100%; object-fit: cover; изначально указали top0 , но он не по макету, в консоли подстроили как будет лучше выглять, по макету отступ 25px, пишем bottom 25px*/
.footer__btn {
  position: absolute;
  right: 0;
  bottom: 25px;
  width: 24px;
  height: 24px;
}

.footer__btn svg {
  display: block;
  width: 100%;
  height: 100%;
  object-fit: cover;
}
